// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgID.proto

#include "MsgID.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_MsgID_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_MsgID_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MsgID_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_MsgID_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_MsgID_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013MsgID.proto*\221\016\n\tMessageID\022\r\n\tMSG_BEGIN"
  "\020\000\022\034\n\026MSG_NORMAL_MSGID_BEGIN\020\240\215\006\022\031\n\023MSG_"
  "DBSVR_HEART_REQ\020\241\215\006\022\031\n\023MSG_DBSVR_HEART_A"
  "CK\020\242\215\006\022\031\n\023MSG_ACCOUNT_REG_REQ\020\243\215\006\022\031\n\023MSG"
  "_ACCOUNT_REG_ACK\020\244\215\006\022\033\n\025MSG_ACCOUNT_LOGI"
  "N_REQ\020\245\215\006\022\033\n\025MSG_ACCOUNT_LOGIN_ACK\020\246\215\006\022\031"
  "\n\023MSG_SERVER_LIST_REQ\020\251\215\006\022\031\n\023MSG_SERVER_"
  "LIST_ACK\020\252\215\006\022\033\n\025MSG_SELECT_SERVER_REQ\020\253\215"
  "\006\022\033\n\025MSG_SELECT_SERVER_ACK\020\254\215\006\022\030\n\022MSG_HE"
  "ART_BEAT_REQ\020\255\215\006\022\030\n\022MSG_HEART_BEAT_ACK\020\256"
  "\215\006\022\034\n\026MSG_LOGICSVR_HEART_REQ\020\257\215\006\022\034\n\026MSG_"
  "LOGICSVR_HEART_ACK\020\260\215\006\022\032\n\024MSG_LOST_CONNE"
  "CT_REQ\020\261\215\006\022\036\n\030MSG_GAMESVR_REGISTER_REQ\020\262"
  "\215\006\022\036\n\030MSG_GAMESVR_REGISTER_ACK\020\263\215\006\022\037\n\031MS"
  "G_LOGINSVR_REGISTER_REQ\020\264\215\006\022\037\n\031MSG_LOGIN"
  "SVR_REGISTER_ACK\020\265\215\006\022\036\n\030MSG_LOAD_PLAYER_"
  "LIST_REQ\020\266\215\006\022\036\n\030MSG_LOAD_PLAYER_LIST_ACK"
  "\020\267\215\006\022\033\n\025MSG_CREATE_PLAYER_REQ\020\270\215\006\022\033\n\025MSG"
  "_CREATE_PLAYER_ACK\020\271\215\006\022!\n\033MSG_SELECT_PLA"
  "YER_ENTER_REQ\020\272\215\006\022!\n\033MSG_SELECT_PLAYER_E"
  "NTER_ACK\020\273\215\006\022#\n\035MSG_SELECT_ENTER_LOGICSV"
  "R_REQ\020\274\215\006\022#\n\035MSG_SELECT_ENTER_LOGICSVR_A"
  "CK\020\275\215\006\022\024\n\016MSG_LOGOUT_REQ\020\276\215\006\022\024\n\016MSG_LOGO"
  "UT_ACK\020\277\215\006\022\032\n\024MSG_NORMAL_MSGID_END\020\277\232\014\022\036"
  "\n\030MSG_LOGICSVR_MSGID_BEGIN\020\300\232\014\022\030\n\022MSG_BA"
  "G_UNLOCK_REQ\020\301\232\014\022\030\n\022MSG_BAG_UNLOCK_ACK\020\302"
  "\232\014\022\027\n\021MSG_STORE_BUY_REQ\020\312\232\014\022\027\n\021MSG_STORE"
  "_BUY_ACK\020\313\232\014\022\035\n\027MSG_GAMESVR_MSGID_BEGIN\020"
  "\340\247\022\022\031\n\023MSG_COMMAND_ATK_REQ\020\341\247\022\022\031\n\023MSG_CO"
  "MMAND_ATK_ACK\020\342\247\022\022\033\n\025MSG_COMMAND_SKILL_R"
  "EQ\020\343\247\022\022\033\n\025MSG_COMMAND_SKILL_ACK\020\344\247\022\022\034\n\026M"
  "SG_COMMAND_DEFINE_REQ\020\345\247\022\022\034\n\026MSG_COMMAND"
  "_DEFINE_ACK\020\346\247\022\022\033\n\025MSG_COMMAND_USING_REQ"
  "\020\347\247\022\022\033\n\025MSG_COMMAND_USING_ACK\020\350\247\022\022!\n\033MSG"
  "_COMMAND_CHANGE_CARD_REQ\020\351\247\022\022!\n\033MSG_COMM"
  "AND_CHANGE_CARD_ACK\020\352\247\022\022\034\n\026MSG_COMMAND_E"
  "SCAPE_REQ\020\353\247\022\022\034\n\026MSG_COMMAND_ESCAPE_ACK\020"
  "\354\247\022\022\033\n\025MSG_DBSVR_MSGID_BEGIN\020\200\265\030\022\030\n\022MSG_"
  "DB_EXE_SQL_REQ\020\201\265\030\022\030\n\022MSG_DB_EXE_SQL_ACK"
  "\020\202\265\030\022\"\n\034MSG_ACCOUNT_LOGIN_VERIFY_REQ\020\203\265\030"
  "\022\"\n\034MSG_ACCOUNT_LOGIN_VERIFY_ACK\020\204\265\030\022\"\n\034"
  "MSG_ACCOUNT_REG_TO_DBSVR_REQ\020\205\265\030\022\"\n\034MSG_"
  "ACCOUNT_REG_TO_DBSVR_ACK\020\206\265\030\022+\n%MSG_LOAD"
  "_LOGICSVR_LIST_FROM_DBSVR_REQ\020\207\265\030\022+\n%MSG"
  "_LOAD_LOGICSVR_LIST_FROM_DBSVR_ACK\020\210\265\030\022\031"
  "\n\023MSG_DBSVR_MSGID_END\020\237\302\036b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_MsgID_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_MsgID_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MsgID_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MsgID_2eproto = {
  false, false, descriptor_table_protodef_MsgID_2eproto, "MsgID.proto", 1833,
  &descriptor_table_MsgID_2eproto_once, descriptor_table_MsgID_2eproto_sccs, descriptor_table_MsgID_2eproto_deps, 0, 0,
  schemas, file_default_instances, TableStruct_MsgID_2eproto::offsets,
  file_level_metadata_MsgID_2eproto, 0, file_level_enum_descriptors_MsgID_2eproto, file_level_service_descriptors_MsgID_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_MsgID_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_MsgID_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MsgID_2eproto);
  return file_level_enum_descriptors_MsgID_2eproto[0];
}
bool MessageID_IsValid(int value) {
  switch (value) {
    case 0:
    case 100000:
    case 100001:
    case 100002:
    case 100003:
    case 100004:
    case 100005:
    case 100006:
    case 100009:
    case 100010:
    case 100011:
    case 100012:
    case 100013:
    case 100014:
    case 100015:
    case 100016:
    case 100017:
    case 100018:
    case 100019:
    case 100020:
    case 100021:
    case 100022:
    case 100023:
    case 100024:
    case 100025:
    case 100026:
    case 100027:
    case 100028:
    case 100029:
    case 100030:
    case 100031:
    case 199999:
    case 200000:
    case 200001:
    case 200002:
    case 200010:
    case 200011:
    case 300000:
    case 300001:
    case 300002:
    case 300003:
    case 300004:
    case 300005:
    case 300006:
    case 300007:
    case 300008:
    case 300009:
    case 300010:
    case 300011:
    case 300012:
    case 400000:
    case 400001:
    case 400002:
    case 400003:
    case 400004:
    case 400005:
    case 400006:
    case 400007:
    case 400008:
    case 499999:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
