// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Logic.proto

#include "Logic.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Logic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerOb_Logic_2eproto;
class LoadPlayerListReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadPlayerListReq> _instance;
} _LoadPlayerListReq_default_instance_;
class PlayerObDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerOb> _instance;
} _PlayerOb_default_instance_;
class LoadPlayerListAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadPlayerListAck> _instance;
} _LoadPlayerListAck_default_instance_;
static void InitDefaultsscc_info_LoadPlayerListAck_Logic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LoadPlayerListAck_default_instance_;
    new (ptr) ::LoadPlayerListAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LoadPlayerListAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadPlayerListAck_Logic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoadPlayerListAck_Logic_2eproto}, {
      &scc_info_PlayerOb_Logic_2eproto.base,}};

static void InitDefaultsscc_info_LoadPlayerListReq_Logic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LoadPlayerListReq_default_instance_;
    new (ptr) ::LoadPlayerListReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LoadPlayerListReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadPlayerListReq_Logic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoadPlayerListReq_Logic_2eproto}, {}};

static void InitDefaultsscc_info_PlayerOb_Logic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayerOb_default_instance_;
    new (ptr) ::PlayerOb();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayerOb::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerOb_Logic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerOb_Logic_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Logic_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Logic_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Logic_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Logic_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LoadPlayerListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LoadPlayerListReq, account_),
  PROTOBUF_FIELD_OFFSET(::LoadPlayerListReq, logincode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlayerOb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlayerOb, uid_),
  PROTOBUF_FIELD_OFFSET(::PlayerOb, name_),
  PROTOBUF_FIELD_OFFSET(::PlayerOb, createtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LoadPlayerListAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LoadPlayerListAck, user_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::LoadPlayerListReq)},
  { 7, -1, sizeof(::PlayerOb)},
  { 15, -1, sizeof(::LoadPlayerListAck)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LoadPlayerListReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PlayerOb_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LoadPlayerListAck_default_instance_),
};

const char descriptor_table_protodef_Logic_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013Logic.proto\"7\n\021LoadPlayerListReq\022\017\n\007ac"
  "count\030\001 \001(\004\022\021\n\tlogincode\030\002 \001(\005\"9\n\010Player"
  "Ob\022\013\n\003uid\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022\022\n\ncreatet"
  "ime\030\003 \001(\004\",\n\021LoadPlayerListAck\022\027\n\004user\030\001"
  " \003(\0132\t.PlayerObb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Logic_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Logic_2eproto_sccs[3] = {
  &scc_info_LoadPlayerListAck_Logic_2eproto.base,
  &scc_info_LoadPlayerListReq_Logic_2eproto.base,
  &scc_info_PlayerOb_Logic_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Logic_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Logic_2eproto = {
  false, false, descriptor_table_protodef_Logic_2eproto, "Logic.proto", 183,
  &descriptor_table_Logic_2eproto_once, descriptor_table_Logic_2eproto_sccs, descriptor_table_Logic_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_Logic_2eproto::offsets,
  file_level_metadata_Logic_2eproto, 3, file_level_enum_descriptors_Logic_2eproto, file_level_service_descriptors_Logic_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Logic_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Logic_2eproto)), true);

// ===================================================================

void LoadPlayerListReq::InitAsDefaultInstance() {
}
class LoadPlayerListReq::_Internal {
 public:
};

LoadPlayerListReq::LoadPlayerListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LoadPlayerListReq)
}
LoadPlayerListReq::LoadPlayerListReq(const LoadPlayerListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_, &from.account_,
    static_cast<size_t>(reinterpret_cast<char*>(&logincode_) -
    reinterpret_cast<char*>(&account_)) + sizeof(logincode_));
  // @@protoc_insertion_point(copy_constructor:LoadPlayerListReq)
}

void LoadPlayerListReq::SharedCtor() {
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logincode_) -
      reinterpret_cast<char*>(&account_)) + sizeof(logincode_));
}

LoadPlayerListReq::~LoadPlayerListReq() {
  // @@protoc_insertion_point(destructor:LoadPlayerListReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadPlayerListReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LoadPlayerListReq::ArenaDtor(void* object) {
  LoadPlayerListReq* _this = reinterpret_cast< LoadPlayerListReq* >(object);
  (void)_this;
}
void LoadPlayerListReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadPlayerListReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadPlayerListReq& LoadPlayerListReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadPlayerListReq_Logic_2eproto.base);
  return *internal_default_instance();
}


void LoadPlayerListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:LoadPlayerListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logincode_) -
      reinterpret_cast<char*>(&account_)) + sizeof(logincode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadPlayerListReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          account_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 logincode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          logincode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadPlayerListReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoadPlayerListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 account = 1;
  if (this->account() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_account(), target);
  }

  // int32 logincode = 2;
  if (this->logincode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_logincode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoadPlayerListReq)
  return target;
}

size_t LoadPlayerListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoadPlayerListReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 account = 1;
  if (this->account() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_account());
  }

  // int32 logincode = 2;
  if (this->logincode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_logincode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadPlayerListReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoadPlayerListReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadPlayerListReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadPlayerListReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoadPlayerListReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoadPlayerListReq)
    MergeFrom(*source);
  }
}

void LoadPlayerListReq::MergeFrom(const LoadPlayerListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoadPlayerListReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account() != 0) {
    _internal_set_account(from._internal_account());
  }
  if (from.logincode() != 0) {
    _internal_set_logincode(from._internal_logincode());
  }
}

void LoadPlayerListReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoadPlayerListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadPlayerListReq::CopyFrom(const LoadPlayerListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoadPlayerListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadPlayerListReq::IsInitialized() const {
  return true;
}

void LoadPlayerListReq::InternalSwap(LoadPlayerListReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoadPlayerListReq, logincode_)
      + sizeof(LoadPlayerListReq::logincode_)
      - PROTOBUF_FIELD_OFFSET(LoadPlayerListReq, account_)>(
          reinterpret_cast<char*>(&account_),
          reinterpret_cast<char*>(&other->account_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadPlayerListReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerOb::InitAsDefaultInstance() {
}
class PlayerOb::_Internal {
 public:
};

PlayerOb::PlayerOb(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlayerOb)
}
PlayerOb::PlayerOb(const PlayerOb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&createtime_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(createtime_));
  // @@protoc_insertion_point(copy_constructor:PlayerOb)
}

void PlayerOb::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerOb_Logic_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&createtime_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(createtime_));
}

PlayerOb::~PlayerOb() {
  // @@protoc_insertion_point(destructor:PlayerOb)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerOb::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayerOb::ArenaDtor(void* object) {
  PlayerOb* _this = reinterpret_cast< PlayerOb* >(object);
  (void)_this;
}
void PlayerOb::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerOb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerOb& PlayerOb::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerOb_Logic_2eproto.base);
  return *internal_default_instance();
}


void PlayerOb::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerOb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&createtime_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(createtime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerOb::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PlayerOb.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 createtime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          createtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerOb::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerOb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_uid(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PlayerOb.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint64 createtime = 3;
  if (this->createtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_createtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerOb)
  return target;
}

size_t PlayerOb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerOb)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_uid());
  }

  // uint64 createtime = 3;
  if (this->createtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_createtime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerOb::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayerOb)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerOb* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerOb>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayerOb)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayerOb)
    MergeFrom(*source);
  }
}

void PlayerOb::MergeFrom(const PlayerOb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerOb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.createtime() != 0) {
    _internal_set_createtime(from._internal_createtime());
  }
}

void PlayerOb::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayerOb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerOb::CopyFrom(const PlayerOb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerOb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerOb::IsInitialized() const {
  return true;
}

void PlayerOb::InternalSwap(PlayerOb* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerOb, createtime_)
      + sizeof(PlayerOb::createtime_)
      - PROTOBUF_FIELD_OFFSET(PlayerOb, uid_)>(
          reinterpret_cast<char*>(&uid_),
          reinterpret_cast<char*>(&other->uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerOb::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadPlayerListAck::InitAsDefaultInstance() {
}
class LoadPlayerListAck::_Internal {
 public:
};

LoadPlayerListAck::LoadPlayerListAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  user_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LoadPlayerListAck)
}
LoadPlayerListAck::LoadPlayerListAck(const LoadPlayerListAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      user_(from.user_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LoadPlayerListAck)
}

void LoadPlayerListAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadPlayerListAck_Logic_2eproto.base);
}

LoadPlayerListAck::~LoadPlayerListAck() {
  // @@protoc_insertion_point(destructor:LoadPlayerListAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadPlayerListAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LoadPlayerListAck::ArenaDtor(void* object) {
  LoadPlayerListAck* _this = reinterpret_cast< LoadPlayerListAck* >(object);
  (void)_this;
}
void LoadPlayerListAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadPlayerListAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadPlayerListAck& LoadPlayerListAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadPlayerListAck_Logic_2eproto.base);
  return *internal_default_instance();
}


void LoadPlayerListAck::Clear() {
// @@protoc_insertion_point(message_clear_start:LoadPlayerListAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadPlayerListAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PlayerOb user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadPlayerListAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoadPlayerListAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlayerOb user = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_user_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_user(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoadPlayerListAck)
  return target;
}

size_t LoadPlayerListAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoadPlayerListAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlayerOb user = 1;
  total_size += 1UL * this->_internal_user_size();
  for (const auto& msg : this->user_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadPlayerListAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoadPlayerListAck)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadPlayerListAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadPlayerListAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoadPlayerListAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoadPlayerListAck)
    MergeFrom(*source);
  }
}

void LoadPlayerListAck::MergeFrom(const LoadPlayerListAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoadPlayerListAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_.MergeFrom(from.user_);
}

void LoadPlayerListAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoadPlayerListAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadPlayerListAck::CopyFrom(const LoadPlayerListAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoadPlayerListAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadPlayerListAck::IsInitialized() const {
  return true;
}

void LoadPlayerListAck::InternalSwap(LoadPlayerListAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_.InternalSwap(&other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadPlayerListAck::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LoadPlayerListReq* Arena::CreateMaybeMessage< ::LoadPlayerListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LoadPlayerListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerOb* Arena::CreateMaybeMessage< ::PlayerOb >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerOb >(arena);
}
template<> PROTOBUF_NOINLINE ::LoadPlayerListAck* Arena::CreateMaybeMessage< ::LoadPlayerListAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LoadPlayerListAck >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
