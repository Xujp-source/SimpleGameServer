// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Logic.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Logic_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Logic_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Logic_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Logic_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Logic_2eproto;
class LoadPlayerListAck;
class LoadPlayerListAckDefaultTypeInternal;
extern LoadPlayerListAckDefaultTypeInternal _LoadPlayerListAck_default_instance_;
class LoadPlayerListReq;
class LoadPlayerListReqDefaultTypeInternal;
extern LoadPlayerListReqDefaultTypeInternal _LoadPlayerListReq_default_instance_;
class PlayerOb;
class PlayerObDefaultTypeInternal;
extern PlayerObDefaultTypeInternal _PlayerOb_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::LoadPlayerListAck* Arena::CreateMaybeMessage<::LoadPlayerListAck>(Arena*);
template<> ::LoadPlayerListReq* Arena::CreateMaybeMessage<::LoadPlayerListReq>(Arena*);
template<> ::PlayerOb* Arena::CreateMaybeMessage<::PlayerOb>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class LoadPlayerListReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoadPlayerListReq) */ {
 public:
  inline LoadPlayerListReq() : LoadPlayerListReq(nullptr) {};
  virtual ~LoadPlayerListReq();

  LoadPlayerListReq(const LoadPlayerListReq& from);
  LoadPlayerListReq(LoadPlayerListReq&& from) noexcept
    : LoadPlayerListReq() {
    *this = ::std::move(from);
  }

  inline LoadPlayerListReq& operator=(const LoadPlayerListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadPlayerListReq& operator=(LoadPlayerListReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadPlayerListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadPlayerListReq* internal_default_instance() {
    return reinterpret_cast<const LoadPlayerListReq*>(
               &_LoadPlayerListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoadPlayerListReq& a, LoadPlayerListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadPlayerListReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadPlayerListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadPlayerListReq* New() const final {
    return CreateMaybeMessage<LoadPlayerListReq>(nullptr);
  }

  LoadPlayerListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadPlayerListReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadPlayerListReq& from);
  void MergeFrom(const LoadPlayerListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadPlayerListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoadPlayerListReq";
  }
  protected:
  explicit LoadPlayerListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Logic_2eproto);
    return ::descriptor_table_Logic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kLogincodeFieldNumber = 2,
  };
  // uint64 account = 1;
  void clear_account();
  ::PROTOBUF_NAMESPACE_ID::uint64 account() const;
  void set_account(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_account() const;
  void _internal_set_account(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 logincode = 2;
  void clear_logincode();
  ::PROTOBUF_NAMESPACE_ID::int32 logincode() const;
  void set_logincode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_logincode() const;
  void _internal_set_logincode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LoadPlayerListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 account_;
  ::PROTOBUF_NAMESPACE_ID::int32 logincode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Logic_2eproto;
};
// -------------------------------------------------------------------

class PlayerOb PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerOb) */ {
 public:
  inline PlayerOb() : PlayerOb(nullptr) {};
  virtual ~PlayerOb();

  PlayerOb(const PlayerOb& from);
  PlayerOb(PlayerOb&& from) noexcept
    : PlayerOb() {
    *this = ::std::move(from);
  }

  inline PlayerOb& operator=(const PlayerOb& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerOb& operator=(PlayerOb&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerOb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerOb* internal_default_instance() {
    return reinterpret_cast<const PlayerOb*>(
               &_PlayerOb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlayerOb& a, PlayerOb& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerOb* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerOb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerOb* New() const final {
    return CreateMaybeMessage<PlayerOb>(nullptr);
  }

  PlayerOb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerOb>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerOb& from);
  void MergeFrom(const PlayerOb& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerOb* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerOb";
  }
  protected:
  explicit PlayerOb(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Logic_2eproto);
    return ::descriptor_table_Logic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kUidFieldNumber = 1,
    kCreatetimeFieldNumber = 3,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint64 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 createtime = 3;
  void clear_createtime();
  ::PROTOBUF_NAMESPACE_ID::uint64 createtime() const;
  void set_createtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_createtime() const;
  void _internal_set_createtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:PlayerOb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 createtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Logic_2eproto;
};
// -------------------------------------------------------------------

class LoadPlayerListAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoadPlayerListAck) */ {
 public:
  inline LoadPlayerListAck() : LoadPlayerListAck(nullptr) {};
  virtual ~LoadPlayerListAck();

  LoadPlayerListAck(const LoadPlayerListAck& from);
  LoadPlayerListAck(LoadPlayerListAck&& from) noexcept
    : LoadPlayerListAck() {
    *this = ::std::move(from);
  }

  inline LoadPlayerListAck& operator=(const LoadPlayerListAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadPlayerListAck& operator=(LoadPlayerListAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadPlayerListAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadPlayerListAck* internal_default_instance() {
    return reinterpret_cast<const LoadPlayerListAck*>(
               &_LoadPlayerListAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoadPlayerListAck& a, LoadPlayerListAck& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadPlayerListAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadPlayerListAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadPlayerListAck* New() const final {
    return CreateMaybeMessage<LoadPlayerListAck>(nullptr);
  }

  LoadPlayerListAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadPlayerListAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadPlayerListAck& from);
  void MergeFrom(const LoadPlayerListAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadPlayerListAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoadPlayerListAck";
  }
  protected:
  explicit LoadPlayerListAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Logic_2eproto);
    return ::descriptor_table_Logic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // repeated .PlayerOb user = 1;
  int user_size() const;
  private:
  int _internal_user_size() const;
  public:
  void clear_user();
  ::PlayerOb* mutable_user(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerOb >*
      mutable_user();
  private:
  const ::PlayerOb& _internal_user(int index) const;
  ::PlayerOb* _internal_add_user();
  public:
  const ::PlayerOb& user(int index) const;
  ::PlayerOb* add_user();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerOb >&
      user() const;

  // @@protoc_insertion_point(class_scope:LoadPlayerListAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerOb > user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Logic_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoadPlayerListReq

// uint64 account = 1;
inline void LoadPlayerListReq::clear_account() {
  account_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadPlayerListReq::_internal_account() const {
  return account_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoadPlayerListReq::account() const {
  // @@protoc_insertion_point(field_get:LoadPlayerListReq.account)
  return _internal_account();
}
inline void LoadPlayerListReq::_internal_set_account(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  account_ = value;
}
inline void LoadPlayerListReq::set_account(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:LoadPlayerListReq.account)
}

// int32 logincode = 2;
inline void LoadPlayerListReq::clear_logincode() {
  logincode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadPlayerListReq::_internal_logincode() const {
  return logincode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadPlayerListReq::logincode() const {
  // @@protoc_insertion_point(field_get:LoadPlayerListReq.logincode)
  return _internal_logincode();
}
inline void LoadPlayerListReq::_internal_set_logincode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  logincode_ = value;
}
inline void LoadPlayerListReq::set_logincode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_logincode(value);
  // @@protoc_insertion_point(field_set:LoadPlayerListReq.logincode)
}

// -------------------------------------------------------------------

// PlayerOb

// uint64 uid = 1;
inline void PlayerOb::clear_uid() {
  uid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlayerOb::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlayerOb::uid() const {
  // @@protoc_insertion_point(field_get:PlayerOb.uid)
  return _internal_uid();
}
inline void PlayerOb::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  uid_ = value;
}
inline void PlayerOb::set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:PlayerOb.uid)
}

// string name = 2;
inline void PlayerOb::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlayerOb::name() const {
  // @@protoc_insertion_point(field_get:PlayerOb.name)
  return _internal_name();
}
inline void PlayerOb::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:PlayerOb.name)
}
inline std::string* PlayerOb::mutable_name() {
  // @@protoc_insertion_point(field_mutable:PlayerOb.name)
  return _internal_mutable_name();
}
inline const std::string& PlayerOb::_internal_name() const {
  return name_.Get();
}
inline void PlayerOb::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerOb::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PlayerOb.name)
}
inline void PlayerOb::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PlayerOb.name)
}
inline void PlayerOb::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PlayerOb.name)
}
inline std::string* PlayerOb::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerOb::release_name() {
  // @@protoc_insertion_point(field_release:PlayerOb.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerOb::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PlayerOb.name)
}
inline std::string* PlayerOb::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PlayerOb.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlayerOb::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlayerOb.name)
}

// uint64 createtime = 3;
inline void PlayerOb::clear_createtime() {
  createtime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlayerOb::_internal_createtime() const {
  return createtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlayerOb::createtime() const {
  // @@protoc_insertion_point(field_get:PlayerOb.createtime)
  return _internal_createtime();
}
inline void PlayerOb::_internal_set_createtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  createtime_ = value;
}
inline void PlayerOb::set_createtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_createtime(value);
  // @@protoc_insertion_point(field_set:PlayerOb.createtime)
}

// -------------------------------------------------------------------

// LoadPlayerListAck

// repeated .PlayerOb user = 1;
inline int LoadPlayerListAck::_internal_user_size() const {
  return user_.size();
}
inline int LoadPlayerListAck::user_size() const {
  return _internal_user_size();
}
inline void LoadPlayerListAck::clear_user() {
  user_.Clear();
}
inline ::PlayerOb* LoadPlayerListAck::mutable_user(int index) {
  // @@protoc_insertion_point(field_mutable:LoadPlayerListAck.user)
  return user_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerOb >*
LoadPlayerListAck::mutable_user() {
  // @@protoc_insertion_point(field_mutable_list:LoadPlayerListAck.user)
  return &user_;
}
inline const ::PlayerOb& LoadPlayerListAck::_internal_user(int index) const {
  return user_.Get(index);
}
inline const ::PlayerOb& LoadPlayerListAck::user(int index) const {
  // @@protoc_insertion_point(field_get:LoadPlayerListAck.user)
  return _internal_user(index);
}
inline ::PlayerOb* LoadPlayerListAck::_internal_add_user() {
  return user_.Add();
}
inline ::PlayerOb* LoadPlayerListAck::add_user() {
  // @@protoc_insertion_point(field_add:LoadPlayerListAck.user)
  return _internal_add_user();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerOb >&
LoadPlayerListAck::user() const {
  // @@protoc_insertion_point(field_list:LoadPlayerListAck.user)
  return user_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Logic_2eproto
